generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  user_id         String        @db.VarChar(36)
  organization_id String        @db.VarChar(36)
  active          Boolean       @default(true)
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onUpdate: Restrict, map: "fk_organization_id")
  users           users         @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "fk_user_id")

  @@id([user_id, organization_id])
  @@index([organization_id], map: "fk_organization_id")
}

model items {
  item_id             String                @id @db.VarChar(36)
  organization_id     String                @db.VarChar(36)
  zi_item_id          String                @db.VarChar(50)
  name                String                @db.Text
  item_price          String?               @db.VarChar(10)
  item_cost           String?               @db.VarChar(10)
  sku                 String?               @db.Text
  created             DateTime              @default(now()) @db.Timestamp(0)
  modified            DateTime              @default(now()) @db.Timestamp(0)
  active              Boolean               @default(true)
  description         String?               @db.Text
  locations_items_qty locations_items_qty[]
}

model locations {
  location_id                                        String                @id @db.VarChar(36)
  organization_id                                    String                @db.VarChar(36)
  name                                               String                @db.VarChar(50)
  created                                            DateTime              @default(now()) @db.Timestamp(0)
  modified                                           DateTime              @default(now()) @db.Timestamp(0)
  active                                             Boolean               @default(true)
  orderPriority                                      Int
  organizations                                      organizations         @relation(fields: [organization_id], references: [organization_id], onUpdate: Restrict, map: "fk_org_id")
  locations_items_qty                                locations_items_qty[]
  transactions_transactions_from_locationTolocations transactions[]        @relation("transactions_from_locationTolocations")
  transactions_transactions_to_locationTolocations   transactions[]        @relation("transactions_to_locationTolocations")

  @@index([organization_id], map: "fk_locations_org_id")
}

model locations_items_qty {
  location_id String    @db.VarChar(36)
  item_id     String    @db.VarChar(36)
  qty         Int
  items       items     @relation(fields: [item_id], references: [item_id], onUpdate: Restrict, map: "fk_item_id")
  locations   locations @relation(fields: [location_id], references: [location_id], onUpdate: Restrict, map: "fk_location_id")

  @@id([location_id, item_id])
  @@index([item_id], map: "fk_locations_items_item_id")
}

model organization_users {
  organization_id String        @db.VarChar(36)
  user_id         String        @db.VarChar(36)
  created         DateTime      @default(now()) @db.Timestamp(0)
  modified        DateTime      @default(now()) @db.Timestamp(0)
  active          Boolean       @default(true)
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onUpdate: Restrict, map: "fk_org_users_org_id")
  users           users         @relation(fields: [user_id], references: [user_id], onUpdate: Restrict, map: "fk_usr_id")

  @@id([organization_id, user_id])
  @@index([user_id], map: "fk_org_users_user_id")
}

model organizations {
  organization_id    String               @id @db.VarChar(36)
  name               String               @db.VarChar(100)
  created            DateTime             @default(now()) @db.Timestamp(0)
  modified           DateTime             @default(now()) @db.Timestamp(0)
  active             Boolean              @default(true)
  admins             admins[]
  locations          locations[]
  organization_users organization_users[]
  transaction_types  transaction_types[]
  transactions       transactions[]
}

model transactions {
  transaction_id                                  String                  @id @db.VarChar(36)
  organization_id                                 String                  @db.VarChar(36)
  from_location                                   String                  @db.VarChar(36)
  to_location                                     String                  @db.VarChar(36)
  item_id                                         String                  @db.VarChar(36)
  reason_id                                       String                  @db.VarChar(36)
  qty                                             Int
  transfer_type                                   String                  @db.VarChar(10)
  project_id                                      String?                 @db.VarChar(36)
  notes                                           String?                 @db.Text
  created                                         DateTime                @default(now()) @db.Timestamp(0)
  reasons_fields_entries                          reasons_fields_entries?
  locations_transactions_from_locationTolocations locations               @relation("transactions_from_locationTolocations", fields: [from_location], references: [location_id], onUpdate: Restrict, map: "fk_transactions_from_location_id")
  organizations                                   organizations           @relation(fields: [organization_id], references: [organization_id], onUpdate: Restrict, map: "fk_transactions_org_id")
  reasons                                         reasons                 @relation(fields: [reason_id], references: [reason_id], onUpdate: Restrict, map: "fk_transactions_reason_id")
  locations_transactions_to_locationTolocations   locations               @relation("transactions_to_locationTolocations", fields: [to_location], references: [location_id], onUpdate: Restrict, map: "fk_transactions_to_location_id")

  @@index([from_location], map: "fk_transactions_from_location_id")
  @@index([organization_id], map: "fk_transactions_org_id")
  @@index([reason_id], map: "fk_transactions_reason_id")
  @@index([to_location], map: "fk_transactions_to_location_id")
}

model users {
  user_id            String               @id @db.VarChar(36)
  name               String               @db.VarChar(50)
  username           String               @db.VarChar(30)
  email              String               @db.VarChar(100)
  password           String               @db.VarChar(255)
  created            DateTime             @default(now()) @db.Timestamp(0)
  modified           DateTime             @default(now()) @db.Timestamp(0)
  active             Boolean              @default(true)
  admins             admins[]
  organization_users organization_users[]
}

model reasons {
  reason_id           String            @id @db.VarChar(36)
  transaction_type_id String            @db.VarChar(36)
  name                String            @db.VarChar(100)
  description         String?           @db.Text
  requires_project    Boolean           @default(false)
  created             DateTime          @default(now()) @db.Timestamp(0)
  modified            DateTime          @default(now()) @db.Timestamp(0)
  active              Boolean           @default(true)
  transaction_types   transaction_types @relation(fields: [transaction_type_id], references: [transaction_type_id], onUpdate: Restrict, map: "fk_reasons_transaction_type_id")
  reasons_fields      reasons_fields[]
  transactions        transactions[]

  @@index([transaction_type_id], map: "fk_reasons_transaction_type_id")
}

model transaction_types {
  transaction_type_id String        @id @db.VarChar(36)
  organization_id     String        @db.VarChar(36)
  type                String        @db.VarChar(20)
  description         String?       @db.Text
  reasons             reasons[]
  organizations       organizations @relation(fields: [organization_id], references: [organization_id], onUpdate: Restrict, map: "fk_transaction_types_org_id")

  @@index([organization_id], map: "fk_transaction_types_org_id")
}

model reasons_fields {
  reasons_fields_id      String                   @id @db.VarChar(36)
  reason_id              String                   @db.VarChar(36)
  field_name             String                   @db.VarChar(50)
  field_type             String                   @db.VarChar(10)
  reasons                reasons                  @relation(fields: [reason_id], references: [reason_id], onUpdate: Restrict, map: "fk_reasons_fields_reason_id")
  reasons_fields_entries reasons_fields_entries[]

  @@index([reason_id], map: "fk_reasons_fields_reason_id")
}

model reasons_fields_entries {
  transaction_id    String         @id @db.VarChar(36)
  reasons_fields_id String         @db.VarChar(36)
  field_value       String         @db.VarChar(100)
  transactions      transactions   @relation(fields: [transaction_id], references: [transaction_id], onUpdate: Restrict, map: "fk_reasons_fields_entries_transaction_id")
  reasons_fields    reasons_fields @relation(fields: [reasons_fields_id], references: [reasons_fields_id], onUpdate: Restrict, map: "fk_reasons_fields_id")

  @@index([reasons_fields_id], map: "fk_reasons_fields_id")
}
