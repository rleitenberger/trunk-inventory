generator client {
  provider = "prisma-client-js"
}

generator pothos {
  provider = "prisma-pothos-types"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admins {
  user_id         String        @db.VarChar(36)
  organization_id String        @db.VarChar(36)
  active          Boolean       @default(true)
  users           user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_user_id")
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_organization_id")

  @@id([user_id, organization_id])
  @@index([organization_id], map: "fk_organization_id")
}

model items {
  item_id             String                @id @db.VarChar(36)
  organization_id     String                @db.VarChar(36)
  zi_item_id          String                @unique(map: "items_zi_item_id") @db.VarChar(50)
  name                String                @db.Text
  item_price          String?               @db.VarChar(10)
  item_cost           String?               @db.VarChar(10)
  sku                 String?               @db.Text
  created             DateTime              @default(now()) @db.Timestamp(0)
  modified            DateTime              @default(now()) @db.Timestamp(0)
  active              Boolean               @default(true)
  description         String?               @db.Text
  locations_items_qty locations_items_qty[]
  transactions        transactions[]
}

model locations {
  location_id                                        String                @id @db.VarChar(36)
  organization_id                                    String                @db.VarChar(36)
  name                                               String                @db.VarChar(50)
  created                                            DateTime              @default(now()) @db.Timestamp(0)
  modified                                           DateTime              @default(now()) @db.Timestamp(0)
  active                                             Boolean               @default(true)
  orderPriority                                      Int
  view_all_items                                     Boolean               @default(false)
  organizations                                      organizations         @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_org_id")
  locations_items_qty                                locations_items_qty[]
  transactions_transactions_from_locationTolocations transactions[]        @relation("transactions_from_locationTolocations")
  transactions_transactions_to_locationTolocations   transactions[]        @relation("transactions_to_locationTolocations")

  @@index([organization_id], map: "fk_locations_org_id")
}

model locations_items_qty {
  location_id String    @db.VarChar(36)
  item_id     String    @db.VarChar(36)
  qty         Int
  items       items     @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_item_id")
  locations   locations @relation(fields: [location_id], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_location_id")

  @@id([location_id, item_id])
  @@index([item_id], map: "fk_locations_items_item_id")
}

model organization_users {
  organization_id String        @db.VarChar(36)
  user_id         String        @db.VarChar(36)
  role            String        @default("user") @db.VarChar(10)
  created         DateTime      @default(now()) @db.Timestamp(0)
  modified        DateTime      @default(now()) @db.Timestamp(0)
  active          Boolean       @default(true)
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_org_users_org_id")
  users           user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_usr_id")

  @@id([organization_id, user_id])
  @@index([user_id], map: "fk_org_users_user_id")
}

model organizations {
  organization_id      String                 @id @db.VarChar(36)
  name                 String                 @db.VarChar(100)
  created              DateTime               @default(now()) @db.Timestamp(0)
  modified             DateTime               @default(now()) @db.Timestamp(0)
  active               Boolean                @default(true)
  admins               admins[]
  item_sync_logs       item_sync_logs[]
  locations            locations[]
  organization_users   organization_users[]
  transaction_types    transaction_types[]
  transactions         transactions[]
  user_invite_requests user_invite_requests[]
  zoho_inventory_keys  zoho_inventory_keys[]
}

model transactions {
  transaction_id                                  String                  @id @db.VarChar(36)
  organization_id                                 String                  @db.VarChar(36)
  from_location                                   String                  @db.VarChar(36)
  to_location                                     String                  @db.VarChar(36)
  item_id                                         String                  @db.VarChar(36)
  reason_id                                       String                  @db.VarChar(36)
  qty                                             Int
  transfer_type                                   String                  @db.VarChar(10)
  created                                         DateTime                @default(now()) @db.Timestamp(0)
  created_by                                      String                  @db.VarChar(36)
  reasons_fields_entries                          reasons_fields_entries?
  transaction_comments                            transaction_comments[]
  user                                            user                    @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_created_by")
  locations_transactions_from_locationTolocations locations               @relation("transactions_from_locationTolocations", fields: [from_location], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_from_location_id")
  items                                           items                   @relation(fields: [item_id], references: [item_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_item_id")
  organizations                                   organizations           @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_org_id")
  reasons                                         reasons                 @relation(fields: [reason_id], references: [reason_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_reason_id")
  locations_transactions_to_locationTolocations   locations               @relation("transactions_to_locationTolocations", fields: [to_location], references: [location_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transactions_to_location_id")

  @@index([from_location], map: "fk_transactions_from_location_id")
  @@index([organization_id], map: "fk_transactions_org_id")
  @@index([reason_id], map: "fk_transactions_reason_id")
  @@index([to_location], map: "fk_transactions_to_location_id")
  @@index([created, transaction_id], map: "idx_created_id")
  @@index([item_id], map: "fk_transactions_item_id")
  @@index([created_by], map: "fk_transactions_created_by")
}

model reasons {
  reason_id           String            @id @db.VarChar(36)
  transaction_type_id String            @db.VarChar(36)
  name                String            @db.VarChar(100)
  description         String?           @db.Text
  sends_email         Boolean           @default(false)
  created             DateTime          @default(now()) @db.Timestamp(0)
  modified            DateTime          @default(now()) @db.Timestamp(0)
  active              Boolean           @default(true)
  reason_emails       reason_emails[]
  transaction_types   transaction_types @relation(fields: [transaction_type_id], references: [transaction_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reasons_transaction_type_id")
  reasons_fields      reasons_fields[]
  transactions        transactions[]

  @@index([transaction_type_id], map: "fk_reasons_transaction_type_id")
}

model transaction_types {
  transaction_type_id String        @id @db.VarChar(36)
  organization_id     String        @db.VarChar(36)
  type                String        @db.VarChar(20)
  description         String?       @db.Text
  reasons             reasons[]
  organizations       organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_types_org_id")

  @@index([organization_id], map: "fk_transaction_types_org_id")
}

model reasons_fields {
  reasons_fields_id                                     String                   @id @db.VarChar(36)
  reason_id                                             String                   @db.VarChar(36)
  field_name                                            String                   @db.VarChar(50)
  field_type                                            String                   @db.VarChar(20)
  active                                                Boolean                  @default(true)
  created                                               DateTime                 @default(now()) @db.Timestamp(0)
  modified                                              DateTime                 @default(now()) @db.Timestamp(0)
  conditions_conditions_condition_fieldToreasons_fields conditions[]             @relation("conditions_condition_fieldToreasons_fields")
  conditions_conditions_dependent_fieldToreasons_fields conditions[]             @relation("conditions_dependent_fieldToreasons_fields")
  field_types                                           field_types              @relation(fields: [field_type], references: [field_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reasons_fields_field_type")
  reasons                                               reasons                  @relation(fields: [reason_id], references: [reason_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reasons_fields_reason_id")
  reasons_fields_entries                                reasons_fields_entries[]

  @@index([reason_id], map: "fk_reasons_fields_reason_id")
  @@index([field_type], map: "fk_reasons_fields_field_type")
}

model reasons_fields_entries {
  transaction_id    String         @id @db.VarChar(36)
  reasons_fields_id String         @db.VarChar(36)
  field_value       String         @db.VarChar(200)
  transactions      transactions   @relation(fields: [transaction_id], references: [transaction_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reasons_fields_entries_transaction_id")
  reasons_fields    reasons_fields @relation(fields: [reasons_fields_id], references: [reasons_fields_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reasons_fields_id")

  @@unique([transaction_id, reasons_fields_id], map: "reasons_field_entry_unique")
  @@index([reasons_fields_id], map: "fk_reasons_fields_id")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model reason_emails {
  reason_email_id String   @id @db.VarChar(36)
  reason_id       String   @db.VarChar(36)
  email           String   @db.VarChar(200)
  active          Boolean  @default(true)
  created         DateTime @default(now()) @db.Timestamp(0)
  modified        DateTime @default(now()) @db.Timestamp(0)
  reasons         reasons  @relation(fields: [reason_id], references: [reason_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_reason_emails_reason_id")

  @@index([reason_id], map: "fk_reason_emails_reason_id")
}

model condition_types {
  condition_type_id String       @id @db.VarChar(36)
  target_data_type  String       @db.VarChar(10)
  type              String       @db.VarChar(5)
  name              String       @db.VarChar(30)
  conditions        conditions[]
}

model conditions {
  condition_id                                              String          @id @db.VarChar(36)
  condition_field                                           String          @db.VarChar(36)
  dependent_field                                           String          @db.VarChar(36)
  required_value                                            String          @db.VarChar(255)
  condition_type_id                                         String          @db.VarChar(36)
  active                                                    Boolean         @default(true)
  created                                                   DateTime        @default(now()) @db.Timestamp(0)
  modified                                                  DateTime        @default(now()) @db.Timestamp(0)
  reasons_fields_conditions_condition_fieldToreasons_fields reasons_fields  @relation("conditions_condition_fieldToreasons_fields", fields: [condition_field], references: [reasons_fields_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fields_conditions_condition_field")
  condition_types                                           condition_types @relation(fields: [condition_type_id], references: [condition_type_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fields_conditions_condition_type")
  reasons_fields_conditions_dependent_fieldToreasons_fields reasons_fields  @relation("conditions_dependent_fieldToreasons_fields", fields: [dependent_field], references: [reasons_fields_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_fields_conditions_dependent_field")

  @@index([condition_field], map: "fk_fields_conditions_condition_field")
  @@index([condition_type_id], map: "fk_fields_conditions_condition_type")
  @@index([dependent_field], map: "fk_fields_conditions_dependent_field")
}

model field_types {
  field_type_id  String           @id @db.VarChar(36)
  name           String           @db.VarChar(30)
  data_type      String           @db.VarChar(10)
  reasons_fields reasons_fields[]
}

model zoho_inventory_keys {
  zoho_inventory_keys_id String        @id @db.VarChar(36)
  organization_id        String        @db.VarChar(36)
  client_id              String?       @db.Text
  client_secret          String?       @db.Text
  access_token           String?       @db.Text
  refresh_token          String?       @db.Text
  expiry                 DateTime?     @db.Timestamp(0)
  iv                     String?       @db.VarChar(40)
  location               String?       @db.Text
  server                 String?       @db.Text
  type                   String?       @db.Text
  organizations          organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_zoho_keys_org_id")

  @@index([organization_id], map: "fk_zoho_keys_org_id")
}

model item_sync_logs {
  item_sync_log_id String        @id @db.VarChar(36)
  organization_id  String        @db.VarChar(36)
  status           String        @default("syncing") @db.VarChar(20)
  items_added      Int           @default(0)
  items_updated    Int           @default(0)
  total_items      Int           @default(0)
  created          DateTime      @default(now()) @db.Timestamp(0)
  organizations    organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_item_sync_organization_id")

  @@index([organization_id], map: "fk_item_sync_organization_id")
}

model account {
  userId            String  @id @db.VarChar(36)
  type              String  @db.VarChar(50)
  provider          String  @db.VarChar(100)
  providerAccountId String  @db.VarChar(200)
  refresh_token     String? @db.VarChar(200)
  access_token      String? @db.VarChar(200)
  expires_at        Int?
  token_type        String? @db.VarChar(200)
  scope             String? @db.Text
  id_token          String? @db.VarChar(200)
  session_state     String? @db.VarChar(50)
  user              user    @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_account_user")
}

model session {
  id           String   @id @db.VarChar(200)
  expires      DateTime @db.Timestamp(0)
  sessionToken String   @unique(map: "sessionToken") @db.VarChar(200)
  userId       String   @db.VarChar(36)
  user         user     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_session_user_id")

  @@index([userId], map: "fk_session_user_id")
}

model user {
  id                 String               @id @db.VarChar(36)
  name               String               @db.VarChar(100)
  username           String               @db.VarChar(100)
  password           String               @db.VarChar(255)
  email              String               @db.VarChar(200)
  emailVerified      DateTime?            @db.Timestamp(0)
  image              String?              @db.VarChar(200)
  account            account?
  admins             admins[]
  organization_users organization_users[]
  session            session[]
  transactions       transactions[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model verificationtoken {
  identifier String   @db.VarChar(200)
  token      String   @db.VarChar(200)
  expires    DateTime @db.Timestamp(0)

  @@ignore
}

model user_invite_requests {
  invite_id       String        @id @db.VarChar(36)
  organization_id String        @db.VarChar(36)
  email           String        @db.VarChar(200)
  created         DateTime      @default(now()) @db.Timestamp(0)
  modified        DateTime      @default(now()) @db.Timestamp(0)
  active          Boolean       @default(true)
  organizations   organizations @relation(fields: [organization_id], references: [organization_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_invites_org_id")

  @@index([organization_id], map: "fk_invites_org_id")
}

model transaction_comments {
  transaction_comment_id String       @id @db.VarChar(36)
  transaction_id         String       @db.VarChar(36)
  user_id                String       @db.VarChar(36)
  comment                String       @db.Text
  created                DateTime     @default(now()) @db.Timestamp(0)
  modified               DateTime     @default(now()) @db.Timestamp(0)
  active                 Boolean      @default(true)
  transactions           transactions @relation(fields: [transaction_id], references: [transaction_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_transaction_comments_transaction_id")

  @@index([transaction_id], map: "fk_transaction_comments_transaction_id")
}
